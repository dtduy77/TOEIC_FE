{"ast":null,"code":"import axios from 'axios';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add request interceptor to add token to requests\naxiosInstance.interceptors.request.use(async config => {\n  var _firebase$auth$curren;\n  const idToken = await ((_firebase$auth$curren = firebase.auth().currentUser) === null || _firebase$auth$curren === void 0 ? void 0 : _firebase$auth$curren.getIdToken());\n  if (idToken) {\n    config.headers['Authorization'] = `Bearer ${idToken}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const api = {\n  // Auth endpoints\n  register: async userData => {\n    const response = await axiosInstance.post('/auth/register', userData);\n    return response.data;\n  },\n  login: async (username, password) => {\n    try {\n      var _firebase$auth$curren2;\n      // Get custom token from backend\n      const formData = new FormData();\n      formData.append('username', username);\n      formData.append('password', password);\n      const response = await axiosInstance.post('/auth/login', formData);\n      const customToken = response.data.access_token;\n\n      // Sign in with custom token\n      await firebase.auth().signInWithCustomToken(customToken);\n\n      // Get ID token\n      const idToken = await ((_firebase$auth$curren2 = firebase.auth().currentUser) === null || _firebase$auth$curren2 === void 0 ? void 0 : _firebase$auth$curren2.getIdToken());\n\n      // Store ID token\n      localStorage.setItem('access_token', idToken || '');\n      return {\n        access_token: idToken || ''\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Vocabulary endpoints\n  getVocabulary: async () => {\n    const response = await axiosInstance.get('/vocabulary/');\n    return response.data;\n  },\n  addVocabulary: async vocab => {\n    const response = await axiosInstance.post('/vocabulary/', vocab);\n    return response.data;\n  },\n  deleteVocabulary: async vocabId => {\n    await axiosInstance.delete(`/vocabulary/${vocabId}`);\n  },\n  // Quiz endpoints\n  generateQuiz: async (numQuestions = 15) => {\n    const response = await axiosInstance.get('/quiz/generate/', {\n      params: {\n        num_questions: numQuestions\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","firebase","API_BASE_URL","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","apps","length","initializeApp","axiosInstance","create","baseURL","interceptors","request","use","config","_firebase$auth$curren","idToken","auth","currentUser","getIdToken","headers","error","Promise","reject","api","register","userData","response","post","data","login","username","password","_firebase$auth$curren2","formData","FormData","append","customToken","access_token","signInWithCustomToken","localStorage","setItem","console","getVocabulary","get","addVocabulary","vocab","deleteVocabulary","vocabId","delete","generateQuiz","numQuestions","params","num_questions"],"sources":["/Users/duongthanhduy/TOEIC_FE/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add request interceptor to add token to requests\naxiosInstance.interceptors.request.use(\n  async (config) => {\n    const idToken = await firebase.auth().currentUser?.getIdToken();\n    if (idToken) {\n      config.headers['Authorization'] = `Bearer ${idToken}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport interface Vocabulary {\n  id: number;\n  word: string;\n  meaning: string;\n  example?: string;\n  user_id: number;\n}\n\nexport interface VocabIn {\n  word: string;\n  meaning: string;\n  example?: string;\n}\n\nexport interface QuizQuestion {\n  word: string;\n  correctAnswer: string;\n  options: string[];\n}\n\nexport interface UserAuth {\n  username: string;\n  password: string;\n}\n\nexport interface UserCreate extends UserAuth {\n  email: string;\n  full_name?: string;\n}\n\nexport interface TokenResponse {\n  access_token: string;\n}\n\nexport const api = {\n  // Auth endpoints\n  register: async (userData: UserCreate): Promise<TokenResponse> => {\n    const response = await axiosInstance.post('/auth/register', userData);\n    return response.data;\n  },\n\n  login: async (username: string, password: string): Promise<TokenResponse> => {\n    try {\n      // Get custom token from backend\n      const formData = new FormData();\n      formData.append('username', username);\n      formData.append('password', password);\n      \n      const response = await axiosInstance.post('/auth/login', formData);\n      const customToken = response.data.access_token;\n\n      // Sign in with custom token\n      await firebase.auth().signInWithCustomToken(customToken);\n      \n      // Get ID token\n      const idToken = await firebase.auth().currentUser?.getIdToken();\n      \n      // Store ID token\n      localStorage.setItem('access_token', idToken || '');\n      \n      return { access_token: idToken || '' };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n\n  // Vocabulary endpoints\n  getVocabulary: async (): Promise<Vocabulary[]> => {\n    const response = await axiosInstance.get('/vocabulary/');\n    return response.data;\n  },\n\n  addVocabulary: async (vocab: VocabIn): Promise<Vocabulary> => {\n    const response = await axiosInstance.post('/vocabulary/', vocab);\n    return response.data;\n  },\n\n  deleteVocabulary: async (vocabId: number): Promise<void> => {\n    await axiosInstance.delete(`/vocabulary/${vocabId}`);\n  },\n\n  // Quiz endpoints\n  generateQuiz: async (numQuestions: number = 15): Promise<QuizQuestion[]> => {\n    const response = await axiosInstance.get('/quiz/generate/', {\n      params: { num_questions: numQuestions },\n    });\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}