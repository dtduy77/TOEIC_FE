{"ast":null,"code":"import axios from 'axios';\nimport { getAuth, signInWithEmailAndPassword, signInWithCustomToken } from 'firebase/auth';\nimport { getCurrentUserIdToken } from '../firebase';\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add request interceptor to add token to requests\naxiosInstance.interceptors.request.use(async config => {\n  try {\n    const idToken = await getCurrentUserIdToken();\n    if (idToken) {\n      config.headers['Authorization'] = `Bearer ${idToken}`;\n    }\n  } catch (error) {\n    console.log('No authenticated user or error getting token');\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const api = {\n  // Auth endpoints\n  register: async (email, password) => {\n    try {\n      // Call backend to register user\n      const response = await axiosInstance.post('/auth/register', {\n        email,\n        password,\n        username: email // Using email as username\n      });\n\n      // Get custom token from backend\n      const customToken = response.data.access_token;\n\n      // Sign in with custom token\n      const auth = getAuth();\n      await signInWithCustomToken(auth, customToken);\n\n      // Get ID token\n      const idToken = await getCurrentUserIdToken();\n\n      // Store ID token\n      localStorage.setItem('access_token', idToken);\n      return {\n        access_token: idToken\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n  login: async (email, password) => {\n    try {\n      // First, authenticate with Firebase client SDK\n      const auth = getAuth();\n      await signInWithEmailAndPassword(auth, email, password);\n\n      // Get ID token from Firebase\n      const idToken = await getCurrentUserIdToken();\n\n      // Call backend to verify the token\n      const response = await axiosInstance.post('/auth/verify-token', {}, {\n        headers: {\n          'Authorization': `Bearer ${idToken}`\n        }\n      });\n\n      // If verification is successful, store the token\n      if (response.status === 200) {\n        localStorage.setItem('access_token', idToken);\n        return {\n          access_token: idToken\n        };\n      } else {\n        throw new Error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Vocabulary endpoints\n  getVocabulary: async () => {\n    const response = await axiosInstance.get('/vocabulary/');\n    return response.data;\n  },\n  addVocabulary: async vocab => {\n    const response = await axiosInstance.post('/vocabulary/', vocab);\n    return response.data;\n  },\n  deleteVocabulary: async vocabId => {\n    await axiosInstance.delete(`/vocabulary/${vocabId}`);\n  },\n  // Quiz endpoints\n  generateQuiz: async (numQuestions = 15) => {\n    const response = await axiosInstance.get('/quiz/generate/', {\n      params: {\n        num_questions: numQuestions\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","getAuth","signInWithEmailAndPassword","signInWithCustomToken","getCurrentUserIdToken","API_BASE_URL","axiosInstance","create","baseURL","interceptors","request","use","config","idToken","headers","error","console","log","Promise","reject","api","register","email","password","response","post","username","customToken","data","access_token","auth","localStorage","setItem","login","status","Error","getVocabulary","get","addVocabulary","vocab","deleteVocabulary","vocabId","delete","generateQuiz","numQuestions","params","num_questions"],"sources":["/Users/duongthanhduy/TOEIC_FE/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signInWithCustomToken } from 'firebase/auth';\nimport { getCurrentUserIdToken } from '../firebase';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add request interceptor to add token to requests\naxiosInstance.interceptors.request.use(\n  async (config) => {\n    try {\n      const idToken = await getCurrentUserIdToken();\n      if (idToken) {\n        config.headers['Authorization'] = `Bearer ${idToken}`;\n      }\n    } catch (error) {\n      console.log('No authenticated user or error getting token');\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport interface Vocabulary {\n  id: number;\n  word: string;\n  meaning: string;\n  example?: string;\n  user_id: number;\n}\n\nexport interface VocabIn {\n  word: string;\n  meaning: string;\n  example?: string;\n}\n\nexport interface QuizQuestion {\n  word: string;\n  correctAnswer: string;\n  options: string[];\n}\n\nexport interface UserAuth {\n  email: string;\n  password: string;\n}\n\nexport interface UserCreate {\n  email: string;\n  password: string;\n}\n\nexport interface TokenResponse {\n  access_token: string;\n}\n\nexport const api = {\n  // Auth endpoints\n  register: async (email: string, password: string): Promise<TokenResponse> => {\n    try {\n      // Call backend to register user\n      const response = await axiosInstance.post('/auth/register', {\n        email,\n        password,\n        username: email // Using email as username\n      });\n      \n      // Get custom token from backend\n      const customToken = response.data.access_token;\n      \n      // Sign in with custom token\n      const auth = getAuth();\n      await signInWithCustomToken(auth, customToken);\n      \n      // Get ID token\n      const idToken = await getCurrentUserIdToken();\n      \n      // Store ID token\n      localStorage.setItem('access_token', idToken);\n      \n      return { access_token: idToken };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n\n  login: async (email: string, password: string): Promise<TokenResponse> => {\n    try {\n      // First, authenticate with Firebase client SDK\n      const auth = getAuth();\n      await signInWithEmailAndPassword(auth, email, password);\n      \n      // Get ID token from Firebase\n      const idToken = await getCurrentUserIdToken();\n      \n      // Call backend to verify the token\n      const response = await axiosInstance.post('/auth/verify-token', {}, {\n        headers: {\n          'Authorization': `Bearer ${idToken}`\n        }\n      });\n      \n      // If verification is successful, store the token\n      if (response.status === 200) {\n        localStorage.setItem('access_token', idToken);\n        return { access_token: idToken };\n      } else {\n        throw new Error('Token verification failed');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n\n  // Vocabulary endpoints\n  getVocabulary: async (): Promise<Vocabulary[]> => {\n    const response = await axiosInstance.get('/vocabulary/');\n    return response.data;\n  },\n\n  addVocabulary: async (vocab: VocabIn): Promise<Vocabulary> => {\n    const response = await axiosInstance.post('/vocabulary/', vocab);\n    return response.data;\n  },\n\n  deleteVocabulary: async (vocabId: number): Promise<void> => {\n    await axiosInstance.delete(`/vocabulary/${vocabId}`);\n  },\n\n  // Quiz endpoints\n  generateQuiz: async (numQuestions: number = 15): Promise<QuizQuestion[]> => {\n    const response = await axiosInstance.get('/quiz/generate/', {\n      params: { num_questions: numQuestions },\n    });\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}