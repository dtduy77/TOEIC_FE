{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add request interceptor to add token to requests\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const api = {\n  // Auth endpoints\n  register: async userData => {\n    const response = await axiosInstance.post('/auth/register', userData);\n    return response.data;\n  },\n  login: async (username, password) => {\n    // For login, we need to use form data format as required by OAuth2PasswordRequestForm\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    const response = await axiosInstance.post('/auth/login', formData);\n    return response.data;\n  },\n  // Vocabulary endpoints\n  getVocabulary: async () => {\n    const response = await axiosInstance.get('/vocabulary/');\n    return response.data;\n  },\n  addVocabulary: async vocab => {\n    const response = await axiosInstance.post('/vocabulary/', vocab);\n    return response.data;\n  },\n  deleteVocabulary: async vocabId => {\n    await axiosInstance.delete(`/vocabulary/${vocabId}`);\n  },\n  // Quiz endpoints\n  generateQuiz: async (numQuestions = 15) => {\n    const response = await axiosInstance.get('/quiz/generate/', {\n      params: {\n        num_questions: numQuestions\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","api","register","userData","response","post","data","login","username","password","formData","FormData","append","getVocabulary","get","addVocabulary","vocab","deleteVocabulary","vocabId","delete","generateQuiz","numQuestions","params","num_questions"],"sources":["/Users/duongthanhduy/TOEIC_FE/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add request interceptor to add token to requests\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport interface Vocabulary {\n  id: number;\n  word: string;\n  meaning: string;\n  example?: string;\n  user_id: number;\n}\n\nexport interface VocabIn {\n  word: string;\n  meaning: string;\n  example?: string;\n}\n\nexport interface QuizQuestion {\n  word: string;\n  correctAnswer: string;\n  options: string[];\n}\n\nexport interface UserAuth {\n  username: string;\n  password: string;\n}\n\nexport interface UserCreate extends UserAuth {\n  email: string;\n  full_name?: string;\n}\n\nexport interface TokenResponse {\n  access_token: string;\n}\n\nexport const api = {\n  // Auth endpoints\n  register: async (userData: UserCreate): Promise<TokenResponse> => {\n    const response = await axiosInstance.post('/auth/register', userData);\n    return response.data;\n  },\n\n  login: async (username: string, password: string): Promise<TokenResponse> => {\n    // For login, we need to use form data format as required by OAuth2PasswordRequestForm\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    \n    const response = await axiosInstance.post('/auth/login', formData);\n    return response.data;\n  },\n\n  // Vocabulary endpoints\n  getVocabulary: async (): Promise<Vocabulary[]> => {\n    const response = await axiosInstance.get('/vocabulary/');\n    return response.data;\n  },\n\n  addVocabulary: async (vocab: VocabIn): Promise<Vocabulary> => {\n    const response = await axiosInstance.post('/vocabulary/', vocab);\n    return response.data;\n  },\n\n  deleteVocabulary: async (vocabId: number): Promise<void> => {\n    await axiosInstance.delete(`/vocabulary/${vocabId}`);\n  },\n\n  // Quiz endpoints\n  generateQuiz: async (numQuestions: number = 15): Promise<QuizQuestion[]> => {\n    const response = await axiosInstance.get('/quiz/generate/', {\n      params: { num_questions: numQuestions },\n    });\n    return response.data;\n  },\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEH;AACX,CAAC,CAAC;;AAEF;AACAC,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAoCD,OAAO,MAAMG,GAAG,GAAG;EACjB;EACAC,QAAQ,EAAE,MAAOC,QAAoB,IAA6B;IAChE,MAAMC,QAAQ,GAAG,MAAMjB,aAAa,CAACkB,IAAI,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;IACrE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDC,KAAK,EAAE,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAA6B;IAC3E;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IACrCE,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;IAErC,MAAML,QAAQ,GAAG,MAAMjB,aAAa,CAACkB,IAAI,CAAC,aAAa,EAAEK,QAAQ,CAAC;IAClE,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAO,aAAa,EAAE,MAAAA,CAAA,KAAmC;IAChD,MAAMT,QAAQ,GAAG,MAAMjB,aAAa,CAAC2B,GAAG,CAAC,cAAc,CAAC;IACxD,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDS,aAAa,EAAE,MAAOC,KAAc,IAA0B;IAC5D,MAAMZ,QAAQ,GAAG,MAAMjB,aAAa,CAACkB,IAAI,CAAC,cAAc,EAAEW,KAAK,CAAC;IAChE,OAAOZ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDW,gBAAgB,EAAE,MAAOC,OAAe,IAAoB;IAC1D,MAAM/B,aAAa,CAACgC,MAAM,CAAC,eAAeD,OAAO,EAAE,CAAC;EACtD,CAAC;EAED;EACAE,YAAY,EAAE,MAAAA,CAAOC,YAAoB,GAAG,EAAE,KAA8B;IAC1E,MAAMjB,QAAQ,GAAG,MAAMjB,aAAa,CAAC2B,GAAG,CAAC,iBAAiB,EAAE;MAC1DQ,MAAM,EAAE;QAAEC,aAAa,EAAEF;MAAa;IACxC,CAAC,CAAC;IACF,OAAOjB,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}