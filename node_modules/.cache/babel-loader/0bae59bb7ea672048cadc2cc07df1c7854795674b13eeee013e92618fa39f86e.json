{"ast":null,"code":"var _LocalStorageManager;\nclass LocalStorageManager {\n  constructor() {\n    this.currentUserId = null;\n    // Load current user from localStorage\n    this.currentUserId = localStorage.getItem('currentUserId');\n  }\n  static getInstance() {\n    if (!LocalStorageManager.instance) {\n      LocalStorageManager.instance = new LocalStorageManager();\n    }\n    return LocalStorageManager.instance;\n  }\n\n  // User management\n  createUser(username, password, email, fullName) {\n    const userId = Date.now().toString();\n    const newUser = {\n      id: userId,\n      username,\n      password: this.hashPassword(password),\n      // Hash password before storing\n      email,\n      fullName,\n      createdAt: new Date(),\n      vocabularies: []\n    };\n    const users = this.getAllUsers();\n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    this.setCurrentUser(userId);\n    return newUser;\n  }\n  login(username, password) {\n    const users = this.getAllUsers();\n    const user = users.find(u => u.username === username && this.verifyPassword(password, u.password));\n    if (user) {\n      this.setCurrentUser(user.id);\n      return user;\n    }\n    return null;\n  }\n  setCurrentUser(userId) {\n    this.currentUserId = userId;\n    localStorage.setItem('currentUserId', userId);\n  }\n  getCurrentUser() {\n    if (!this.currentUserId) {\n      localStorage.removeItem('currentUserId');\n      return null;\n    }\n    const user = this.getUserById(this.currentUserId);\n    if (!user) {\n      localStorage.removeItem('currentUserId');\n      this.currentUserId = null;\n    }\n    return user;\n  }\n  getUserById(userId) {\n    const users = this.getAllUsers();\n    return users.find(user => user.id === userId) || null;\n  }\n  getAllUsers() {\n    const usersJson = localStorage.getItem('users');\n    if (!usersJson) return [];\n    const users = JSON.parse(usersJson);\n    // Convert string dates back to Date objects\n    return users.map(user => ({\n      ...user,\n      createdAt: new Date(user.createdAt),\n      vocabularies: user.vocabularies.map(vocab => ({\n        ...vocab,\n        createdAt: new Date(vocab.createdAt)\n      }))\n    }));\n  }\n\n  // Simple password hashing (in a real app, use a proper hashing library)\n  hashPassword(password) {\n    return btoa(password); // This is just for demonstration, use proper hashing in production\n  }\n  verifyPassword(password, hashedPassword) {\n    return this.hashPassword(password) === hashedPassword;\n  }\n\n  // Vocabulary management\n  addVocabulary(vocabulary) {\n    const user = this.getCurrentUser();\n    if (!user) throw new Error('No current user');\n    const newVocabulary = {\n      ...vocabulary,\n      id: Date.now().toString()\n    };\n    user.vocabularies.push(newVocabulary);\n    this.updateUser(user);\n    return newVocabulary;\n  }\n  deleteVocabulary(vocabularyId) {\n    const user = this.getCurrentUser();\n    if (!user) throw new Error('No current user');\n    user.vocabularies = user.vocabularies.filter(v => v.id !== vocabularyId);\n    this.updateUser(user);\n  }\n  getVocabularies() {\n    const user = this.getCurrentUser();\n    if (!user) return [];\n    return user.vocabularies;\n  }\n  updateUser(updatedUser) {\n    const users = this.getAllUsers();\n    const index = users.findIndex(u => u.id === updatedUser.id);\n    if (index !== -1) {\n      users[index] = updatedUser;\n      localStorage.setItem('users', JSON.stringify(users));\n    }\n  }\n}\n_LocalStorageManager = LocalStorageManager;\nLocalStorageManager.instance = void 0;\nexport const storage = LocalStorageManager.getInstance();","map":{"version":3,"names":["LocalStorageManager","constructor","currentUserId","localStorage","getItem","getInstance","instance","createUser","username","password","email","fullName","userId","Date","now","toString","newUser","id","hashPassword","createdAt","vocabularies","users","getAllUsers","push","setItem","JSON","stringify","setCurrentUser","login","user","find","u","verifyPassword","getCurrentUser","removeItem","getUserById","usersJson","parse","map","vocab","btoa","hashedPassword","addVocabulary","vocabulary","Error","newVocabulary","updateUser","deleteVocabulary","vocabularyId","filter","v","getVocabularies","updatedUser","index","findIndex","_LocalStorageManager","storage"],"sources":["/Users/duongthanhduy/TOEIC_FE/src/utils/storage.ts"],"sourcesContent":["interface User {\n  id: string;\n  username: string;\n  password: string; // Store hashed password\n  email: string;\n  fullName: string;\n  createdAt: Date;\n  vocabularies: Vocabulary[];\n}\n\ninterface Vocabulary {\n  id: string;\n  word: string;\n  meaning: string;\n  example: string;\n  createdAt: Date;\n}\n\nclass LocalStorageManager {\n  private static instance: LocalStorageManager;\n  private currentUserId: string | null = null;\n\n  private constructor() {\n    // Load current user from localStorage\n    this.currentUserId = localStorage.getItem('currentUserId');\n  }\n\n  public static getInstance(): LocalStorageManager {\n    if (!LocalStorageManager.instance) {\n      LocalStorageManager.instance = new LocalStorageManager();\n    }\n    return LocalStorageManager.instance;\n  }\n\n  // User management\n  public createUser(username: string, password: string, email: string, fullName: string): User {\n    const userId = Date.now().toString();\n    const newUser: User = {\n      id: userId,\n      username,\n      password: this.hashPassword(password), // Hash password before storing\n      email,\n      fullName,\n      createdAt: new Date(),\n      vocabularies: []\n    };\n    \n    const users = this.getAllUsers();\n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    \n    this.setCurrentUser(userId);\n    return newUser;\n  }\n\n  public login(username: string, password: string): User | null {\n    const users = this.getAllUsers();\n    const user = users.find(u => u.username === username && this.verifyPassword(password, u.password));\n    \n    if (user) {\n      this.setCurrentUser(user.id);\n      return user;\n    }\n    return null;\n  }\n\n  public setCurrentUser(userId: string): void {\n    this.currentUserId = userId;\n    localStorage.setItem('currentUserId', userId);\n  }\n\n  public getCurrentUser(): User | null {\n    if (!this.currentUserId) {\n      localStorage.removeItem('currentUserId');\n      return null;\n    }\n    const user = this.getUserById(this.currentUserId);\n    if (!user) {\n      localStorage.removeItem('currentUserId');\n      this.currentUserId = null;\n    }\n    return user;\n  }\n\n  public getUserById(userId: string): User | null {\n    const users = this.getAllUsers();\n    return users.find(user => user.id === userId) || null;\n  }\n\n  public getAllUsers(): User[] {\n    const usersJson = localStorage.getItem('users');\n    if (!usersJson) return [];\n    \n    const users = JSON.parse(usersJson);\n    // Convert string dates back to Date objects\n    return users.map((user: any) => ({\n      ...user,\n      createdAt: new Date(user.createdAt),\n      vocabularies: user.vocabularies.map((vocab: any) => ({\n        ...vocab,\n        createdAt: new Date(vocab.createdAt)\n      }))\n    }));\n  }\n\n  // Simple password hashing (in a real app, use a proper hashing library)\n  private hashPassword(password: string): string {\n    return btoa(password); // This is just for demonstration, use proper hashing in production\n  }\n\n  private verifyPassword(password: string, hashedPassword: string): boolean {\n    return this.hashPassword(password) === hashedPassword;\n  }\n\n  // Vocabulary management\n  public addVocabulary(vocabulary: Omit<Vocabulary, 'id'>): Vocabulary {\n    const user = this.getCurrentUser();\n    if (!user) throw new Error('No current user');\n\n    const newVocabulary: Vocabulary = {\n      ...vocabulary,\n      id: Date.now().toString()\n    };\n\n    user.vocabularies.push(newVocabulary);\n    this.updateUser(user);\n\n    return newVocabulary;\n  }\n\n  public deleteVocabulary(vocabularyId: string): void {\n    const user = this.getCurrentUser();\n    if (!user) throw new Error('No current user');\n\n    user.vocabularies = user.vocabularies.filter(v => v.id !== vocabularyId);\n    this.updateUser(user);\n  }\n\n  public getVocabularies(): Vocabulary[] {\n    const user = this.getCurrentUser();\n    if (!user) return [];\n    return user.vocabularies;\n  }\n\n  private updateUser(updatedUser: User): void {\n    const users = this.getAllUsers();\n    const index = users.findIndex(u => u.id === updatedUser.id);\n    if (index !== -1) {\n      users[index] = updatedUser;\n      localStorage.setItem('users', JSON.stringify(users));\n    }\n  }\n}\n\nexport const storage = LocalStorageManager.getInstance();\nexport type { User, Vocabulary }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}