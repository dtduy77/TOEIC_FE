{"ast":null,"code":"var _jsxFileName = \"/Users/duongthanhduy/TOEIC_FE/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, signInWithGoogle, getCurrentUserIdToken } from '../firebase';\nimport { signOut, onAuthStateChanged } from 'firebase/auth';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is authenticated on initial load and listen for auth state changes\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async firebaseUser => {\n      if (firebaseUser) {\n        try {\n          // User is signed in\n          const idToken = await getCurrentUserIdToken();\n          localStorage.setItem('access_token', idToken);\n          setUser({\n            email: firebaseUser.email || '',\n            uid: firebaseUser.uid\n          });\n          setIsAuthenticated(true);\n          setError(null);\n        } catch (error) {\n          console.error('Error getting token:', error);\n          setError('Authentication error');\n        }\n      } else {\n        // User is signed out\n        localStorage.removeItem('access_token');\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n      setLoading(false);\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n  const login = async (email, password) => {\n    setLoading(true);\n    try {\n      // Use the API service to handle login\n      await api.login(email, password);\n      // Auth state change listener will update the state\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(error.message || 'Invalid email or password');\n      setLoading(false);\n      return false;\n    }\n  };\n  const loginWithGoogle = async () => {\n    setLoading(true);\n    try {\n      await signInWithGoogle();\n      // Auth state change listener will update the state\n      return true;\n    } catch (error) {\n      console.error('Google login error:', error);\n      setError(error.message || 'Failed to sign in with Google');\n      setLoading(false);\n      return false;\n    }\n  };\n  const register = async (email, password) => {\n    setLoading(true);\n    try {\n      // Use the API service to handle registration\n      await api.register(email, password);\n      // Auth state change listener will update the state\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setError(error.message || 'Registration failed');\n      setLoading(false);\n      return false;\n    }\n  };\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      // Auth state change listener will handle the rest\n      navigate('/login');\n    } catch (error) {\n      console.error('Logout error:', error);\n      setError('Logout failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      loginWithGoogle,\n      register,\n      logout,\n      isAuthenticated,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"qe7ZJTQKWs3afFnjA6DNxgJcoaU=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useNavigate","auth","signInWithGoogle","getCurrentUserIdToken","signOut","onAuthStateChanged","api","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","error","setError","navigate","unsubscribe","firebaseUser","idToken","localStorage","setItem","email","uid","console","removeItem","login","password","message","loginWithGoogle","register","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/duongthanhduy/TOEIC_FE/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, createUser, signInWithGoogle, getCurrentUserIdToken } from '../firebase';\nimport { signOut, onAuthStateChanged } from 'firebase/auth';\nimport { api } from '../services/api';\n\ninterface User {\n  email: string;\n  uid: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<boolean>;\n  loginWithGoogle: () => Promise<boolean>;\n  register: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isAuthenticated: boolean;\n  error: string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  // Check if user is authenticated on initial load and listen for auth state changes\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser) {\n        try {\n          // User is signed in\n          const idToken = await getCurrentUserIdToken();\n          localStorage.setItem('access_token', idToken);\n          \n          setUser({\n            email: firebaseUser.email || '',\n            uid: firebaseUser.uid\n          });\n          setIsAuthenticated(true);\n          setError(null);\n        } catch (error) {\n          console.error('Error getting token:', error);\n          setError('Authentication error');\n        }\n      } else {\n        // User is signed out\n        localStorage.removeItem('access_token');\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n      setLoading(false);\n    });\n    \n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    setLoading(true);\n    try {\n      // Use the API service to handle login\n      await api.login(email, password);\n      // Auth state change listener will update the state\n      return true;\n    } catch (error: any) {\n      console.error('Login error:', error);\n      setError(error.message || 'Invalid email or password');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const loginWithGoogle = async (): Promise<boolean> => {\n    setLoading(true);\n    try {\n      await signInWithGoogle();\n      // Auth state change listener will update the state\n      return true;\n    } catch (error: any) {\n      console.error('Google login error:', error);\n      setError(error.message || 'Failed to sign in with Google');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const register = async (email: string, password: string): Promise<boolean> => {\n    setLoading(true);\n    try {\n      // Use the API service to handle registration\n      await api.register(email, password);\n      // Auth state change listener will update the state\n      return true;\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      setError(error.message || 'Registration failed');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      // Auth state change listener will handle the rest\n      navigate('/login');\n    } catch (error) {\n      console.error('Logout error:', error);\n      setError('Logout failed');\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, loginWithGoogle, register, logout, isAuthenticated, error }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}