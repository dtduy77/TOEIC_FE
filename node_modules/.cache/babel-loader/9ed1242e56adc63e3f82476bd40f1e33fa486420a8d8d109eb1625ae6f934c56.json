{"ast":null,"code":"import axios from 'axios';\nimport { getAuth, signInWithCustomToken, signOut } from 'firebase/auth';\nimport { getCurrentUserIdToken } from '../firebase';\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add request interceptor to add token to requests\naxiosInstance.interceptors.request.use(async config => {\n  try {\n    const idToken = await getCurrentUserIdToken();\n    if (idToken) {\n      config.headers['Authorization'] = `Bearer ${idToken}`;\n    }\n  } catch (error) {\n    console.log('No authenticated user or error getting token');\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const api = {\n  // Auth endpoints\n  logout: async () => {\n    try {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        // Call backend to logout\n        await axiosInstance.post('/auth/logout', {}, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n      }\n\n      // Sign out from Firebase\n      const auth = getAuth();\n      await signOut(auth);\n\n      // Remove token from localStorage\n      localStorage.removeItem('access_token');\n    } catch (error) {\n      console.error('Logout error:', error);\n      throw error;\n    }\n  },\n  register: async (email, password) => {\n    try {\n      // Call backend to register user\n      const response = await axiosInstance.post('/auth/register', {\n        email,\n        password,\n        username: email // Using email as username\n      });\n\n      // Get custom token from backend\n      const customToken = response.data.access_token;\n\n      // Sign in with custom token\n      const auth = getAuth();\n      await signInWithCustomToken(auth, customToken);\n\n      // Get ID token\n      const idToken = await getCurrentUserIdToken();\n\n      // Store ID token\n      localStorage.setItem('access_token', idToken);\n      return {\n        access_token: idToken\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n  login: async (email, password) => {\n    try {\n      // Use the backend login endpoint with OAuth2PasswordRequestForm format\n      const formData = new URLSearchParams();\n      formData.append('username', email); // Backend uses email as username\n      formData.append('password', password);\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const customToken = response.data.access_token;\n\n      // Sign in with custom token from backend\n      const auth = getAuth();\n      await signInWithCustomToken(auth, customToken);\n\n      // Get ID token from Firebase\n      const idToken = await getCurrentUserIdToken();\n\n      // Store the ID token\n      localStorage.setItem('access_token', idToken);\n      return {\n        access_token: idToken\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Vocabulary endpoints\n  getVocabulary: async () => {\n    const response = await axiosInstance.get('/vocabulary/');\n    return response.data;\n  },\n  addVocabulary: async vocab => {\n    const response = await axiosInstance.post('/vocabulary/', vocab);\n    return response.data;\n  },\n  deleteVocabulary: async vocabId => {\n    await axiosInstance.delete(`/vocabulary/${vocabId}`);\n  },\n  updateVocabulary: async (vocabId, data) => {\n    const response = await axiosInstance.put(`/vocabulary/user/update/${vocabId}`, data);\n    return response.data;\n  },\n  // User-specific vocabulary endpoints\n  getUserVocabulary: async (skip = 0, limit = 100) => {\n    const response = await axiosInstance.get('/vocabulary/user/', {\n      params: {\n        skip,\n        limit\n      }\n    });\n    return response.data;\n  },\n  addVocabularyToUser: async (vocabId, masteryLevel = 0, notes) => {\n    const response = await axiosInstance.post(`/vocabulary/user/add/${vocabId}`, {\n      mastery_level: masteryLevel,\n      notes: notes\n    });\n    return response.data;\n  },\n  removeVocabularyFromUser: async vocabId => {\n    await axiosInstance.delete(`/vocabulary/user/remove/${vocabId}`);\n  },\n  // Quiz endpoints\n  generateQuiz: async (numQuestions = 10) => {\n    const response = await axiosInstance.get('/vocabulary/quiz/user/', {\n      params: {\n        num_questions: numQuestions\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","getAuth","signInWithCustomToken","signOut","getCurrentUserIdToken","API_BASE_URL","axiosInstance","create","baseURL","interceptors","request","use","config","idToken","headers","error","console","log","Promise","reject","api","logout","token","localStorage","getItem","post","auth","removeItem","register","email","password","response","username","customToken","data","access_token","setItem","login","formData","URLSearchParams","append","getVocabulary","get","addVocabulary","vocab","deleteVocabulary","vocabId","delete","updateVocabulary","put","getUserVocabulary","skip","limit","params","addVocabularyToUser","masteryLevel","notes","mastery_level","removeVocabularyFromUser","generateQuiz","numQuestions","num_questions"],"sources":["/Users/duongthanhduy/TOEIC_FE/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signInWithCustomToken, signOut } from 'firebase/auth';\nimport { getCurrentUserIdToken } from '../firebase';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Create axios instance with default config\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add request interceptor to add token to requests\naxiosInstance.interceptors.request.use(\n  async (config) => {\n    try {\n      const idToken = await getCurrentUserIdToken();\n      if (idToken) {\n        config.headers['Authorization'] = `Bearer ${idToken}`;\n      }\n    } catch (error) {\n      console.log('No authenticated user or error getting token');\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport interface Vocabulary {\n  id: number;\n  word: string;\n  meaning: string;\n  example?: string;\n  user_id: number;\n  created_at: string;\n  mastery_level?: number;\n  notes?: string;\n}\n\nexport interface VocabIn {\n  word: string;\n  meaning: string;\n  example?: string;\n  mastery_level?: number;\n  notes?: string;\n}\n\nexport interface QuizQuestion {\n  question: string;\n  choices: string[];\n  answer: string;\n}\n\nexport interface UserAuth {\n  email: string;\n  password: string;\n}\n\nexport interface UserCreate {\n  email: string;\n  password: string;\n}\n\nexport interface TokenResponse {\n  access_token: string;\n}\n\nexport const api = {\n  // Auth endpoints\n  logout: async (): Promise<void> => {\n    try {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        // Call backend to logout\n        await axiosInstance.post('/auth/logout', {}, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n      }\n      \n      // Sign out from Firebase\n      const auth = getAuth();\n      await signOut(auth);\n      \n      // Remove token from localStorage\n      localStorage.removeItem('access_token');\n    } catch (error) {\n      console.error('Logout error:', error);\n      throw error;\n    }\n  },\n  register: async (email: string, password: string): Promise<TokenResponse> => {\n    try {\n      // Call backend to register user\n      const response = await axiosInstance.post('/auth/register', {\n        email,\n        password,\n        username: email // Using email as username\n      });\n      \n      // Get custom token from backend\n      const customToken = response.data.access_token;\n      \n      // Sign in with custom token\n      const auth = getAuth();\n      await signInWithCustomToken(auth, customToken);\n      \n      // Get ID token\n      const idToken = await getCurrentUserIdToken();\n      \n      // Store ID token\n      localStorage.setItem('access_token', idToken);\n      \n      return { access_token: idToken };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n\n  login: async (email: string, password: string): Promise<TokenResponse> => {\n    try {\n      // Use the backend login endpoint with OAuth2PasswordRequestForm format\n      const formData = new URLSearchParams();\n      formData.append('username', email); // Backend uses email as username\n      formData.append('password', password);\n      \n      const response = await axios.post(`${API_BASE_URL}/auth/login`, formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      \n      const customToken = response.data.access_token;\n      \n      // Sign in with custom token from backend\n      const auth = getAuth();\n      await signInWithCustomToken(auth, customToken);\n      \n      // Get ID token from Firebase\n      const idToken = await getCurrentUserIdToken();\n      \n      // Store the ID token\n      localStorage.setItem('access_token', idToken);\n      \n      return { access_token: idToken };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n\n  // Vocabulary endpoints\n  getVocabulary: async (): Promise<Vocabulary[]> => {\n    const response = await axiosInstance.get('/vocabulary/');\n    return response.data;\n  },\n\n  addVocabulary: async (vocab: VocabIn): Promise<Vocabulary> => {\n    const response = await axiosInstance.post('/vocabulary/', vocab);\n    return response.data;\n  },\n\n  deleteVocabulary: async (vocabId: number): Promise<void> => {\n    await axiosInstance.delete(`/vocabulary/${vocabId}`);\n  },\n\n  updateVocabulary: async (vocabId: number, data: Partial<VocabIn>): Promise<Vocabulary> => {\n    const response = await axiosInstance.put(`/vocabulary/user/update/${vocabId}`, data);\n    return response.data;\n  },\n  \n  // User-specific vocabulary endpoints\n  getUserVocabulary: async (skip: number = 0, limit: number = 100): Promise<Vocabulary[]> => {\n    const response = await axiosInstance.get('/vocabulary/user/', {\n      params: { skip, limit }\n    });\n    return response.data;\n  },\n\n  addVocabularyToUser: async (vocabId: number, masteryLevel: number = 0, notes?: string): Promise<Vocabulary> => {\n    const response = await axiosInstance.post(`/vocabulary/user/add/${vocabId}`, {\n      mastery_level: masteryLevel,\n      notes: notes\n    });\n    return response.data;\n  },\n\n  removeVocabularyFromUser: async (vocabId: number): Promise<void> => {\n    await axiosInstance.delete(`/vocabulary/user/remove/${vocabId}`);\n  },\n\n  // Quiz endpoints\n  generateQuiz: async (numQuestions: number = 10): Promise<QuizQuestion[]> => {\n    const response = await axiosInstance.get('/vocabulary/quiz/user/', {\n      params: { num_questions: numQuestions },\n    });\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}