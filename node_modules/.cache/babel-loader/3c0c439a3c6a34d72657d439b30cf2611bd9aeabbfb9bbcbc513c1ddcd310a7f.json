{"ast":null,"code":"var _jsxFileName = \"/Users/duongthanhduy/TOEIC_FE/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { api } from '../services/api';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  // Check if user is authenticated on initial load\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      const username = localStorage.getItem('username');\n      if (token && username) {\n        setUser({\n          username\n        });\n        setIsAuthenticated(true);\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const response = await api.login(username, password);\n      if (response.access_token) {\n        // Store token and username\n        localStorage.setItem('access_token', response.access_token);\n        localStorage.setItem('username', username);\n\n        // Update context state\n        setUser({\n          username\n        });\n        setIsAuthenticated(true);\n\n        // Clear any existing error\n        setError(null);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      setError('Invalid username or password');\n      return false;\n    }\n  };\n  const register = async (username, password, email) => {\n    try {\n      const response = await api.register({\n        username,\n        password,\n        email\n      });\n      if (response.access_token) {\n        localStorage.setItem('access_token', response.access_token);\n        localStorage.setItem('username', username);\n        setUser({\n          username\n        });\n        setIsAuthenticated(true);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('username');\n    setUser(null);\n    setIsAuthenticated(false);\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      register,\n      logout,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"yGaJ+wLEVBXp9pV+c8uy41yOYCo=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","api","useNavigate","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","navigate","checkAuth","token","localStorage","getItem","username","login","password","response","access_token","setItem","setError","error","console","register","email","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/duongthanhduy/TOEIC_FE/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { api } from '../services/api';\nimport { useNavigate } from 'react-router-dom';\n\ninterface User {\n  username: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (username: string, password: string) => Promise<boolean>;\n  register: (username: string, password: string, email: string) => Promise<boolean>;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  // Check if user is authenticated on initial load\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      const username = localStorage.getItem('username');\n      \n      if (token && username) {\n        setUser({ username });\n        setIsAuthenticated(true);\n      }\n      \n      setLoading(false);\n    };\n    \n    checkAuth();\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const response = await api.login(username, password);\n      if (response.access_token) {\n        // Store token and username\n        localStorage.setItem('access_token', response.access_token);\n        localStorage.setItem('username', username);\n        \n        // Update context state\n        setUser({ username });\n        setIsAuthenticated(true);\n        \n        // Clear any existing error\n        setError(null);\n        \n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      setError('Invalid username or password');\n      return false;\n    }\n  };\n\n  const register = async (username: string, password: string, email: string): Promise<boolean> => {\n    try {\n      const response = await api.register({ username, password, email });\n      if (response.access_token) {\n        localStorage.setItem('access_token', response.access_token);\n        localStorage.setItem('username', username);\n        setUser({ username });\n        setIsAuthenticated(true);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('username');\n    setUser(null);\n    setIsAuthenticated(false);\n    navigate('/login');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, register, logout, isAuthenticated }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}